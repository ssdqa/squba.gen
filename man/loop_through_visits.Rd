% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fact_loops.R
\name{loop_through_visits}
\alias{loop_through_visits}
\title{Patient Facts per Visit Type}
\usage{
loop_through_visits(
  cohort_tbl,
  omop_or_pcornet,
  check_func,
  site_col,
  time = FALSE,
  visit_type_tbl,
  visit_tbl = cdm_tbl("visit_occurrence"),
  site_list,
  visit_list = c("inpatient", "outpatient"),
  grouped_list = c("person_id", "start_date", "end_date", "fu", "site"),
  domain_tbl
)
}
\arguments{
\item{cohort_tbl}{a table with members of the cohort that has been run through \code{\link[=prepare_cohort]{prepare_cohort()}}}

\item{omop_or_pcornet}{string indicating the appropriate CDM backend (\code{omop} or \code{pcornet})}

\item{check_func}{the base function for the check that needs to be executed across time; this argument
should be structured as the following, where cht is the cohort and t is the input data
for the function:

\if{html}{\out{<div class="sourceCode">}}\preformatted{              function(cht, t)\{check_function(param1 = cht, param2 = t, param3 = param3_input, ...,
              paramX = paramX_input)\}

              all parameters for the base check function should be included if any defaults are not being
              used
}\if{html}{\out{</div>}}}

\item{site_col}{the column in the data where the site variable can be found}

\item{time}{a logical indicating whether the analysis is being conducted longitudinally}

\item{visit_type_tbl}{a table that defines available visit types that are called in \code{visit_types.}:
\itemize{
\item \code{visit_concept_id} / \code{visit_detail_concept_id}: the visit_(detail)_concept_id that represents the visit type of interest (i.e. 9201 or IP)
\item \code{visit_type}: the string label to describe the visit type; this label can be used multiple times
within the file if multiple visit_concept_ids/enc_types represent the visit type
}}

\item{visit_tbl}{the cdm encounter or visit_occurrence or visit_detail tbl}

\item{site_list}{the sites to iterate through}

\item{visit_list}{the list of visit types to iterate through}

\item{grouped_list}{the input for which to group variables}

\item{domain_tbl}{a table that defines the domains where facts should be identified with the following columns:
\itemize{
\item \code{domain}: a string label for the domain being examined (i.e. prescription drugs)
\item \code{domain_tbl}: the CDM table where information for this domain can be found (i.e. drug_exposure)
\item \code{filter_logic}: an optional string to be parsed as logic to filter the domain_tbl as needed to best represent the domain
}}
}
\value{
a list of dataframes with median number of facts per patient for all domains in domain_tbl, where each dataframe is specific to a
given visit type from visit_list
}
\description{
This function will loop through each site and visit type provided to and execute
the provided check function to compute facts stratified by visit type. Primarily intended
for use in the Patient Facts module, but can be adapted for use elsewhere.
}
\examples{
\dontrun{
# for a function like...
 mock_function <- function(cohort,
                           input_tbl){

     test <- input_tbl \%>\%
        inner_join(cohort) \%>\%
        group_by(site) \%>\%
        summarise(n_row = n())

     return(test)
 }

# allow this function to be executed while stratifying by visit type
cohort <- dplyr::tibble('person_id' = c(1,2,3,4),
                        'site' = c('Site A', 'Site A', 'Site B', 'Site B'),
                        'start_date' = c('2012-01-01', '2014-01-10',
                                         '2015-03-05, '2020-01-07'),
                        'end_date' = c('2015-01-01', '2019-01-10',
                                       '2010-03-05, '2024-01-07'))

sample_visits <- dplyr::tibble('visit_concept_id' = 9202,
                               'visit_type' = 'outpatient')

sample_domains <- dplyr::tibble('domain' = 'diagnosis',
                                'domain_tbl' = 'condition_occurrence',
                                'filter_logic' = NA)

loop_through_visits(cohort_tbl = cohort,
                    omop_or_pcornet = 'omop',
                    check_func = function(cht, t){
                       mock_function(cohort = cht,
                                     input_tbl = t)
                    },
                    site_col = 'site',
                    time = FALSE,
                    visit_type_tbl = sample_visits,
                    visit_tbl = cdm_tbl('visit_occurrence'),
                    site_list = c('Site A', 'Site B'),
                    visit_list = c('outpatient'),
                    grouped_list = c('person_id','start_date','end_date',
                                     'site'),
                    domain_tbl = sample_domains)


}

}
